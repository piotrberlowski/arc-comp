// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("DB_POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizerRoles Organizer[]
  isAdmin Boolean @default(false)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@unique([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Organizer {
  userId String
  club String

  user User @relation(fields:[userId], references: [id], onDelete: Cascade)

  @@id([userId, club])
}

model EquipmentCategory {
  id String @id
  name String @unique
  participants Participant[]
}

model AgeGroup {
  id String @id
  name String @unique
  participants Participant[]
}

model RoundFormat {
  id   String @id @default(cuid())
  name String @unique
  tournaments Tournament[]
  endCount Int @default(28)
  groupSize Int @default(4)
}

model Tournament {
  id String @id @default(cuid())
  name String
  date DateTime
  formatId String
  organizerClub String
  format RoundFormat @relation(fields: [formatId], references: [id], onDelete: Restrict)
  participants Participant[]
  groupAssignments GroupAssignment[]
  participantScores ParticipantScore[] @relation("ParticipantScore")

  isArchive Boolean @default(false)
}

enum GenderGroup {
  M
  F
}

model Participant {
  id String @id @default(cuid())
  name String
  membershipNo String
  ageGroupId String
  categoryId String
  tournamentId String
  club String?
  genderGroup GenderGroup
  ageGroup AgeGroup @relation(fields: [ageGroupId], references: [id], onDelete: Restrict)
  category EquipmentCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Restrict)
  groupAssignment GroupAssignment?
  participantScore ParticipantScore? @relation("ParticipantScore")
  @@unique([tournamentId, membershipNo])
}

model GroupAssignment {
  id String @id @default(cuid())
  participantId String @unique
  tournamentId String
  groupNumber Int
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  @@unique([participantId, tournamentId])
}

model ParticipantScore {
  id String @id @default(cuid())
  participantId String @unique
  tournamentId String
  score Int?
  isComplete Boolean @default(false)
  participant Participant @relation("ParticipantScore", fields: [participantId], references: [id], onDelete: Cascade)
  tournament Tournament @relation("ParticipantScore", fields: [tournamentId], references: [id], onDelete: Cascade)
  @@unique([participantId, tournamentId])
}